import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns                                                                         #used for making statistical graphics


df_tracks = pd.read_csv(r'C:\Users\91907\Downloads\spotifyfinal\tracks.csv')                   # 'r' is used for raw string 
print(df_tracks.head())
print(pd.isnull(df_tracks).sum())
sorted_df = df_tracks.sort_values('popularity',ascending = True).head(10)
print(sorted_df)
print(df_tracks.describe().transpose())
most_popular = df_tracks.query('popularity > 85', inplace = False).sort_values('popularity', ascending = False)         #inplace is used to create new dataframe
print(most_popular[:10])



# Assuming 'Date' column is in the format "1900" (year)
df_tracks['release_date'] = pd.to_datetime(df_tracks['release_date'], format='mixed')                     #converting it to year format using datetime



# Group plays by year and visualize
yearly_plays = df_tracks.groupby(df_tracks['release_date'].dt.year)['name'].count()
plt.figure(figsize=(10, 6))
yearly_plays.plot(kind='line')
plt.xlabel('Year')
plt.ylabel('Number of Plays')
plt.title('Yearly Listening Trends')
plt.show()



#displaying particular artist
print(df_tracks[["artists"]].iloc[18])



#changing the duration time to sec from milisec
df_tracks["duration"] = df_tracks["duration_ms"].apply(lambda x : round(x/1000))            # apply is used to pass a function and to apply 
df_tracks.drop("duration_ms", inplace = True, axis=1)
print(df_tracks.duration.head())




# List of non-numeric columns to exclude from correlation calculation
non_numeric_columns = ["key", "mode", "explicit", "id", "name"]                          # Add other non-numeric column names if needed

# Drop non-numeric columns from the DataFrame
df_numeric = df_tracks.drop(non_numeric_columns, axis=1)

# Convert remaining columns to numeric (if needed)
df_numeric = df_numeric.apply(pd.to_numeric, errors='coerce')                           #coerce = invalid parsing will be set as NaN(not a number)

# Calculate correlation matrix
corr_df = df_numeric.corr(method="pearson")                                             #pearson method is used to measure the linear relationship



# Visualize the correlation matrix using a heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(corr_df, annot=True, cmap='coolwarm', vmin=-1, vmax=1)                       #annot allows us to show the numerical value assosiated with each shell in the heatmap
plt.title('Correlation Matrix')
plt.show()



#displaying 4% data of the actual dataset
sample_df = df_tracks.sample(int(0.004*len(df_tracks)))
print(len(sample_df))



#visualizing loudness vs energy
plt.figure(figsize=(10,6))
sns.regplot (data = sample_df, y = "loudness", x = "energy", color = "c").set(title = "Loudness vs Energy correlation")
plt.show()



#visualizing the correlation graph between popularity and acousticness
plt.figure(figsize=(10,6))
sns.regplot (data = sample_df, y = "popularity", x = "acousticness", color = "b").set(title = "popularity vs acousticness correlation")
plt.show()



#lists of years and corresponding durations
years = [2010, 2011, 2012, 2013, 2014]
durations = [200, 220, 210, 240, 230]  
plt.figure(figsize=(10, 6))
plt.plot(years, durations, marker='o', linestyle='-', color='b', label='Duration')
plt.title("Year vs Duration")
plt.xlabel("Year")
plt.ylabel("Duration")
plt.grid(True, linestyle='--', alpha=0.6)
plt.legend()
plt.tight_layout()                                                          # used to adjust the subplots so it will be fit into specified area
plt.show()



df_genre=pd.read_csv(r"C:\Users\91907\Downloads\spotifydata\SpotifyFeatures.csv")
print(df_genre.head())

plt.title("Duration of the Songs in Different Genres")
sns.color_palette("rocket", as_cmap= True)
sns .barplot(y='genre', x='duration_ms', data=df_genre)
plt.xlabel("Duration in milli seconds")
plt.ylabel("Genres")
plt.show()



#displaying top 5 genres by popularity

sns.set_style(style = "darkgrid")
plt.figure(figsize=(10,5))
famous = df_genre.sort_values("popularity", ascending = False).head (10)
sns.barplot(y='genre', x='popularity', data = famous).set(title= "Top 5 Genres by Popularity")
plt.show()












