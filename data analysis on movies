import numpy as np # linear algebra
import pandas as pd
import os
import matplotlib.pyplot as plt
import seaborn as sns
sns.set(style="white", color_codes=True)
imdb_movies = pd.read_csv(r"C:\Users\91907\Downloads\movies\imdb_top_1000.csv")
correlation = imdb_movies.corr()
print(correlation)


plt.figure(figsize=(14,14))
sns.heatmap(correlation,annot=True,linewidths=0.01,vmax=1,square=True,cbar=True)
plt.show()

imdb_movies['release_year'].value_counts().head(10).plot.bar(figsize=(12,4))


# visualize the relationship between vote_rating and budget(using last 12 records)
imdb_movies.head(20).boxplot(column='budget', by='vote_average',figsize=(12,8))


imdb_movies.head(12).boxplot(column='revenue',by='budget',figsize=(12,8))

#Top 10 Highest profit movies
top10 = imdb_movies.nlargest(10,'profit')
top10.index = top10.original_title
top10[['original_title','profit']].plot.bar(figsize=(12,4))



#Diectors with most number of movies.
imdb_movies.director.value_counts().head(10).plot.bar(figsize=(12,4))



#Popularity Vs Budget
plt.figure(figsize=(12,10))
plt.title("IMDB Popularity Vs Budget")
plt.xlabel("Popularity")
plt.ylabel("Budget")
tmp=plt.scatter(imdb_movies.popularity,imdb_movies.budget,c=imdb_movies.popularity,vmin=3,vmax=10)
plt.yticks([i*2500 for i in range(11)])
plt.colorbar(tmp,fraction=.025)
plt.show()


#Profit VS Average Voting
plt.figure(figsize=(12,10))
plt.title("Profit VS Avg Voting of Top 20 Profitable movies")
plt.xlabel('Profit')
plt.plot(top20ProfitMovies.profit,top20ProfitMovies.vote_average)
plt.legend(['Profit VS Avg Voting'],loc='lower left')
plt.yticks(range(10))
plt.show()




#No of Movie released in each Genres
arrayGenres = []
for i in imdb_movies.genres:
    if type(i) == str:
        for x in i.split('|'):
            arrayGenres.append(x)
            
from collections import Counter
dicGenresWithCounts = Counter(arrayGenres)
df=pd.DataFrame.from_dict([dicGenresWithCounts.values()])
df.columns=list(dicGenresWithCounts.keys())
df.plot.bar(figsize=(12,6))
plt.title("No of movies released in each Genres")
plt.xlabel("Genres")
plt.ylabel("No of movies released")
plt.show()


#Top 10 Directors
imdb_movies.director.value_counts()[:10].plot.pie(autopct='%1.1f%%',figsize=(10,10))



#Top 10 Actor/Actress
arrayCast = []
for i in imdb_movies.cast:
    if type(i) == str:
        for x in i.split('|'):
            arrayCast.append(x)
dicCastWithCounts = Counter(arrayCast)
df_Cast=pd.DataFrame(data={'Cast':list(dicCastWithCounts.keys()),'Count':list(dicCastWithCounts.values())}).sort_values(by='Count',ascending=False)
df_Cast.index = df_Cast.Cast
df_Cast.Count.head(10).plot.bar(figsize=(12,6))
plt.title("Top 10 Actor/Actress")
plt.xlabel("Cast")
plt.ylabel("No of movies released")
plt.show()


#Top 10 Acter/Actress analysis graph
df_Cast.Count.head(10).plot.pie(autopct='%1.1f%%',figsize=(10,10))


